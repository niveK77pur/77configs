#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                   Settings
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set prompt to use (taken over from currently active PS1)
set promptfmt "\033[0;1;33m%u@%h\033[0m:\033[35m%w/\033[1m%f\033[0m"

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set icons

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                   Mappings
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# use enter for shell commands
map <enter> shell

# # dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f

# Actions in lf ----------------------------------------------------------------
# execute current file (must be executable)
map x $$f
map X !$f

# delete selected files
map D delete

# navigate using fzf
map <a-F> :fzf_jump
map <a-f> :fzf_go
map <a-c> :fzf_cd_shell
map <a-r> :fzf_grep

# Quick access to programs -----------------------------------------------------
# open lazygit
map L $lazygit

# open $EDITOR
map E $$EDITOR $fs

# open dragon-drag-and-drop
map <a-d> :dragon

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                   Commands
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# define a custom 'open' command -----------------------------------------------
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    # based on file extension (string after last '.')
    case ${f##*.} in
        ytlink|ylink)   firefox "$(head -n1 $f)" & exit;;
        tlink)          firefox "$(head -n1 $f)" & exit;;
        vlink)          vlc --quiet "$(head -n1 $f)" &> /dev/null & exit;;
        # wlink)          chromium --app="$(head -n1 $f)" &> /dev/null & exit;;
        wlink)          firefox --new-window "$(head -n1 $f)" & exit;;
        link)           firefox "$(head -n1 $f)" & exit;;
        md)             typora $f & exit;;
        ps)             zathura $f & exit;;
        flb)            flowblade $f & exit;;
        blend*)         blender $f & exit;;
        pcapng)         wireshark $f & exit;;
        ipynb)          jupyter-notebook $f;;
        docx|pptx|xlsx) onlyoffice-desktopeditors & exit;;
    esac

    # based on mime type
    case $(file -Lb --mime-type $f) in
        text/*)             $EDITOR $fx;;
        application/pdf)    zathura $fx &;;
        image/svg*)         inkscape $f &;;
        image/*)            feh --scale-down $f &;;
        video/*)            mpv $f & ;;
        *)                  for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Archives ---------------------------------------------------------------------
# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# compress current file or selected files with 7zip
cmd 7z ${{
    set -f
    mkdir $1
    cp -r $fx $1
    7z a $1 $1
    rm -rf $1
}}

# Fuzzy Finder -----------------------------------------------------------------
cmd fzf_jump ${{
    # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location (maxdepth=1)')"
    res="$(sk -c 'find -maxdepth 1' --reverse --header='Jump to location (maxdepth=1)')"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_go ${{
    # res="$(find */* | fzf --reverse --header='Jump to location')"
    # res="$(sk -c 'find */*' --reverse --header='Jump to location')"
    res="$(sk -c 'rg --files' --reverse --header='Jump to location')"
    if [ -f "$res" ]; then
        cmd="select"
    elif [ -d "$res" ]; then
        cmd="cd"
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_cd_shell ${{
    # res="$(__fzf_cd__)"
    res="$(sk -c 'find -type d')"
    lf -remote "send $id cd \"$res\""
}}

cmd fzf_grep ${{
    res="$(sk -c 'rg "{}"' | awk -F":" '{print $1}')"
    lf -remote "send $id select \"$res\""
}}

# Miscellaneous ----------------------------------------------------------------
# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# # define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# open dragon-drag-and-drop ----------------------------------------------------
cmd dragon &{{
    dragon-drop -a -x $fx
    # if [ "${#fs}" -eq 0 ]; then
    #     dragon-drag -x $f
    # else
    #     dragon-drag -a $fs
    # fi
}}

# Navigate using z.lua ---------------------------------------------------------
cmd z-jump ${{
    HOSTNAME="$(hostname)"
    if [ "$HOSTNAME" = "titan" ]; then
        z_exe="/home/kevinb/Downloads/Programs/z.lua/z.lua"
    elif [ "$HOSTNAME" = "NB-ASUS" ]; then
        z_exe="/usr/share/z.lua/z.lua"
    fi
    lf -remote "send ${id} cd '$($z_exe -I -e $1)'"
}}
map zz push :z-jump<space>

