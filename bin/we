#!/usr/bin/env python3

import os
import re
import sys

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                      Setup
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ep_start: float | None = None
if len(sys.argv) > 1:
    # -1 for 0 indexing
    ep_start = float(sys.argv[1])

mpv_prefix: list[str] = []

# Enable NVIDIA GPU in Hybrid setup
mpv_prefix += [
    '__NV_PRIME_RENDER_OFFLOAD=1',
    '__NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0',
    '__GLX_VENDOR_LIBRARY_NAME=nvidia',
    '__VK_LAYER_NV_optimus=NVIDIA_only',
]

MPV_FLAGS = [
    '--fs',
    '--profile=anime4k',
    '--resume-playback-check-mtime',
    '--input-conf={}/.config/mpv/watch-episode-input.conf'.format(os.environ['HOME']),
    '--save-position-on-quit',
    '--write-filename-in-watch-later-config',
    '--watch-later-directory=.',
]


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                    Functions
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


def getEpisodeCount(filename: str) -> float:
    """Get episode number from file name

    Returns episode number given a regex pattern. Returns -1 if no episode
    count was found; it may require implementing additional regex patterns.
    """
    if m := re.search(r'ep0{0,3}([0-9.]+)(?<!\.)', filename):
        return float(m.group(1))
    elif m := re.search(r'Episode.*?([0-9.]+)(?<!\.)', filename):
        return float(m.group(1))
    elif m := re.search(r'^\s*([0-9.]+)\.', filename):
        return float(m.group(1))
    elif m := re.search(r'episode-([0-9.]+)(?<!\.)', filename):
        return float(m.group(1))
    elif m := re.search(r'EP\.([0-9.]+)(?<!\.)', filename):
        return float(m.group(1))
    elif m := re.search(r'- ([0-9.]+)(?<!\.) ', filename):
        return float(m.group(1))
    return -1


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                                   Sort files
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


episodes: list[tuple[str, float]] = [(f, getEpisodeCount(f)) for f in os.listdir()]
episodes = list(filter(lambda e: e[1] >= 0, episodes))
episodes.sort(key=lambda e: e[1])

for i, f in enumerate(episodes):
    print('>>', i, f)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                           Get requeted episode index
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

playlist_start = ''
if ep_start:
    if ep_start < 0:
        assert int(ep_start) == ep_start, 'Backward index was not an integer'
        try:
            ep_index = episodes.index(episodes[int(ep_start)])
        except IndexError:
            print(f'Index {ep_start} out of range.')
            exit(2)
    else:
        try:
            ep_index = [e[1] for e in episodes].index(ep_start)
        except ValueError:
            print(f'Episode {ep_start} does not exist.')
            exit(1)
    playlist_start = f'--playlist-start={ep_index}'

_ = os.system(
    '{} mpv {} {} -- {}'.format(
        ' '.join(mpv_prefix),
        ' '.join(MPV_FLAGS),
        playlist_start,
        ' '.join((f'"{e[0]}"' for e in episodes)),
    )
)
